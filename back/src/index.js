// -*- coding: utf-8 -*-
//server.js
//----------------------------------
// Created By: Matthew Kastl
// Created Date: 1/15/2023
// version 1.0
//----------------------------------
// """This file is an express webserver
// that serves the public direcotry under root.
//  """ 
//----------------------------------
// 
//
//Imports
const express = require('express');
const dotenv = require('dotenv');
const path = require('path'); 
const cors = require('cors');
const fsp = require("fs").promises;
const fs = require('fs');
const spawn = require("child_process").spawn;

let pythonProcess = null;
let current_response = null;

//Load in .env file.
dotenv.config();

//Construct a new webapp, this is our server
const app = express();

// Cross orgine handling
app.use(cors())

//Read in what port to use from the env
const port = process.env.PORT;

//Declare the dist directory as our static dir, and host it. Anything that hits
//the / endpoint will get the dist dir back
const publicPath = path.join(__dirname, '../../front');
console.log(publicPath)
app.use(express.static(publicPath));


var multer = require('multer');
var upload = multer({dest : 'uploads'}).single('photo');


app.post('/process', upload, function(req, res){
  console.log('Image process request received...');
  (async () => {

    current_response = res;
      
    // string generated by canvas.toDataURL()
    const img = req.body.photo;
    const bbox = [
                  req.body.xmin,
                  req.body.ymin,
                  req.body.width,
                  req.body.height
                ];
    // strip off the data: url prefix to get just the base64-encoded bytes
    const data = img.replace(/^data:image\/\w+;base64,/, "");
    
    const buf = Buffer.from(data, "base64");
    await fsp.writeFile("./uploads/image.png", buf);

    console.warn("sending exec sig")
    pythonProcess.stdin.write(`0 ../../uploads/image.png ${bbox[0]} ${bbox[1]}  ${bbox[2]} ${bbox[3]}\n`);
  })();
});


app.get('/nextObj', function(req, res){
  console.log('Next request received...')
  const sendFIlePath = path.join(__dirname, '../../HandOccNet/demo/image_3dmesh.obj')
  res.sendFile(sendFIlePath, (err) => ({if (err) {console.log(err)}}))
});


function spawn_processor() {
  console.log("Spawning processor...")
  pythonProcess = spawn(
    'wsl', [ 
    'cd', './HandOccNet/demo', 
    '&&', 
    'python3', 'HOC_Runner.py'
    ]
  );
  console.warn(pythonProcess.pid)


  pythonProcess.on('close', (code) => {
    console.log('child process exited with code ', code);
    spawn_processor()
  });

  pythonProcess.on('error', (error) => {
    console.error('error: ', error.message);
  });

  pythonProcess.stdout.on('data', (data) => {
    msg = data.toString();
    // console.log('Processor std: ', data.toString());
    if (msg.includes("^^fin^^")) {

      try {
        current_response.send('Finished processing!')
      }
      catch(err) {
        console.warn(err);
      }
    }

    if (msg.includes("Processor ready!^")) {
      console.log("Processor ready!")
    }
  });

  pythonProcess.stderr.on('data', (data) => {
    console.error('Processor ste: ', data.toString());
  });
}

function inject_HOC_Runner() {

  const from = path.join(__dirname, './HOC_Runner.py')
  const to = path.join(__dirname, '../../HandOccNet/demo/HOC_Runner.py')

  if(!fs.existsSync(to)) {
    console.warn('HOC_Runner not found, injecting!');

    fs.copyFile(from, to, (err) => {
      if (err) {
        console.error('Injection error:', err)
      } else {
        spawn_processor()
      }
    });
  }
  else {
    spawn_processor()
  }
}


//Start our server on the port we selected.
app.listen(port, () => {
  inject_HOC_Runner()
  console.log(`[server]: Server is running at http://localhost:${port}`);
});
