// -*- coding: utf-8 -*-
//server.js
//----------------------------------
// Created By: Matthew Kastl
// Created Date: 1/15/2023
// version 1.0
//----------------------------------
// """This file is an express webserver
// that serves the public direcotry under root.
//  """ 
//----------------------------------
// 
//
//Imports
const express = require('express');
const dotenv = require('dotenv');
const path = require('path'); 
const cors = require('cors');
const fs = require("fs").promises;
const spawn = require("child_process").spawn;

//Load in .env file.
dotenv.config();

//Construct a new webapp, this is our server
const app = express();

// Cross orgine handling
app.use(cors())

//Read in what port to use from the env
const port = process.env.PORT;

//Declare the dist directory as our static dir, and host it. Anything that hits
//the / endpoint will get the dist dir back
const publicPath = path.join(__dirname, '../../front');
console.log(publicPath)
app.use(express.static(publicPath));


var multer = require('multer');
var upload = multer({dest : 'uploads'}).single('photo');


app.post('/process', upload, function(req, res){
  console.log('Image process request received...');
  (async () => {
      
    // string generated by canvas.toDataURL()
    const img = req.body.photo;
    const bbox = [
                  req.body.xmin,
                  req.body.ymin,
                  req.body.width,
                  req.body.height
                ];
    console.log(bbox)
    // strip off the data: url prefix to get just the base64-encoded bytes
    const data = img.replace(/^data:image\/\w+;base64,/, "");
    
    const buf = Buffer.from(data, "base64");
    await fs.writeFile("./uploads/image.png", buf);

    console.log("Spawning child")
    const pythonProcess = spawn(
      'wsl', [ 
        'cd', '../handoccnet/demo', 
      '&&', 
      'python3', 'demo_fitting.py', '--gpu', '0', '--path', '../../handoccnetstream/uploads/image.png', '--xmin', bbox[0], '--ymin', bbox[1], '--width', bbox[2], '--height', bbox[3] 
    ]
  );


    pythonProcess.on('close', (code) => {
      console.log('child process exited with code ', code);
      res.send('Finished processing!')
    });

    pythonProcess.on('error', (error) => {
      console.error('error: ', error.message);
    });

    pythonProcess.stdout.on('data', (data) => {
      console.log('pattern: ', data.toString());
    });

    pythonProcess.stderr.on('data', (data) => {
      console.error('err: ', data.toString());
    });

  })();



  // pythonProcess.stdout.on('data', (data) => {
  //   console.log('pattern: ', data.toString());
  // });

});

app.get('/next', function(req, res){
  console.log('Next request received...')
  const sendFIlePath = path.join(__dirname, '../../../HandOccNet/demo/fitting_input_2d_prediction.png')
  res.sendFile(sendFIlePath, (err) => ({if (err) {console.log(err)}}))
});

app.get('/nextObj', function(req, res){
  console.log('Next object request received...')
  const sendFIlePath = path.join(__dirname, '../../../HandOccNet/demo/image_3dmesh.obj')
  res.sendFile(sendFIlePath, (err) => ({if (err) {console.log(err)}}))
});



//Start are server on the port we selected.
app.listen(port, () => {
  console.log(`[server]: Server is running at http://localhost:${port}`);
});